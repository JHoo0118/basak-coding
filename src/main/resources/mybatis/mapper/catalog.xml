<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.basakcoding.basak.mapper.CatalogMapper">
	<!-- 강의목록 -->
	<select id="courseList" resultType="Map">
	
		SELECT co.*,ca.name CATEGORY_NAME,a.*,a.name ADMIN_NAME
		FROM COURSES co
		JOIN CATEGORY ca 
		ON co.category_id = ca.category_id
		JOIN ADMINS a ON a.admin_id = co.admin_id
		
	</select>
	
	<!-- 강의상세보기 -->
	<select id="selectOne" parameterType="String" resultType="Map">
	
		SELECT co.*,ca.name CATEGORY_NAME,a.*,a.name ADMIN_NAME
		FROM COURSES co
		JOIN CATEGORY ca 
		ON co.category_id = ca.category_id
		JOIN ADMINS a ON a.admin_id = co.admin_id
		WHERE co.course_id=#{courseId}
		
	</select>
	
	<!-- FaQ 질문/답변 (TITLE/CONTENT) 가져오기 -->
	<select id="faqList"  parameterType="String" resultType="Map">
		
		SELECT * FROM FAQ 
		WHERE course_id=#{courseId} ORDER BY FAQ_ID
	
	</select>
	
	<!-- 커리큘럼 리스트 받아오기
	<select id="curriList"  parameterType="String" resultType="Map">
		
		SELECT * 
        FROM VIDEO V
        JOIN CURRICULUM C 
        ON c.curriculum_id = v.curriculum_id 
        WHERE course_id= #{courseId}
        ORDER BY video_id
	</select>
	 -->
	 
	 <!-- 정후꺼 복붙 한거 이해해야됨 -->
	 <resultMap type="CurriculumDTO" id="curriculums">
      <collection column="curriculum_id" 
                    property="videos" 
                    javaType="java.util.List" 
                    ofType="VideoDTO" 
                    select="getVideoList">
        </collection>
   </resultMap>
   
   
   <!-- 커리큘럼 얻기 -->
   <select id="getCurriculumList" parameterType="String" resultMap="curriculums">
      SELECT * FROM curriculum WHERE course_id = #{courseId}
   </select>
   
    <select id="getVideoList" resultType="VideoDTO">
          SELECT * FROM video WHERE curriculum_id = #{curriculums} ORDER BY video_id
    </select>
    
    <!-- 여기까지 정후꺼 복붙 -->
	 
	 

	
	
	<!-- 강의상세보기 강의설명 -->
	<select id="getClobText" parameterType="String" resultType="String">
		SELECT DESCRIPTION AS CONTENTS FROM COURSES WHERE COURSE_ID=#{courseId}
	</select>
	
	
	
	<!-- 좋아요 관련 쿼리 시작 -->
	<!-- 이전 좋아요 누른기록 체크용 -->
	<select id="likeCheck" parameterType="Map" resultType="Int">
	
	SELECT COUNT(*)
	FROM LIKES
	WHERE member_id=#{memberId} AND course_id=#{courseId}
	
	</select>
	
	<!-- 좋아요 등록 -->
	<insert id="like" parameterType="Map">
	
	INSERT INTO LIKES (LIKE_ID,MEMBER_ID,COURSE_ID)
	VALUES (SEQ_LIKES.NEXTVAL,#{memberId},#{courseId})
	
	</insert>
	
	<!-- 좋아요 삭제 -->
	<delete id="unLike" parameterType="Map">
	
	DELETE FROM LIKES
	WHERE MEMBER_ID=#{memberId} AND COURSE_ID=#{courseId} 
	
	</delete >
	
	<!--강의별 좋아요 개수 확인 -->
	<update  id = "likeCount" parameterType="Map">
	
	UPDATE COURSES
	SET LIKE_COUNT = (SELECT COUNT(*) FROM LIKES WHERE COURSE_ID=#{courseId} )

	WHERE COURSE_ID=#{courseId} 
	
	</update>
	<!-- 좋아요 관련 쿼리 끝 -->

	
	<!-- 리뷰 관련 쿼리 시작 -->	
	<!-- 강의후기 리스트 -->
	<select id="reviewList" parameterType="String" resultType="Map">
	
	SELECT M.MEMBER_ID, M.USERNAME NAME, M.AVATAR, R.* 
	FROM members M 
	JOIN review R 
	ON M.MEMBER_ID = R.MEMBER_ID
    WHERE R.COURSE_ID=#{courseId}
	
	</select>
	
	<!-- 모달안 멤버별 후기내용 가져오기 -->
	<select id="reviewContent" parameterType="Map" resultType="String">
		SELECT content FROM review
		WHERE member_id = #{memberId} and course_id= #{courseId}
	
	</select>
	<!-- 모달안 멤버별 후기 별점 가져오기 -->
	<select id="reviewRating" parameterType="Map" resultType="String">
		SELECT rating FROM review
		WHERE member_id = #{memberId} and course_id= #{courseId}
	
	</select>
	
	<!-- 강의후기 갯수 -->	
	<select id="reviewCount" parameterType="String" resultType="Int" >
	SELECT COUNT(*) FROM review WHERE COURSE_ID=#{courseId} 
	</select>
	
	<!-- 강의 결제여부 확인 -->
	<select id="checkPayment" parameterType="Map" resultType="Int">
	select count(*) FROM PAYMENT WHERE MEMBER_ID=#{memberId} and COURSE_ID=#{courseId} 
	</select>
	
	<select id="reviewCheck" parameterType="Map" resultType="Int">
	select count(*) FROM review WHERE MEMBER_ID=#{memberId} and COURSE_ID=#{courseId} 
	</select>
	
	<insert id="reviewInsert" parameterType="Map">
	INSERT INTO REVIEW
	VALUES (SEQ_REVIEW.NEXTVAL,#{courseId},#{memberId},#{content},#{rating},default)
	</insert>
	
	<update id="reviewUpdate" parameterType="Map">
	
	UPDATE review
	SET content = #{content},
	    rating  = #{rating}
	WHERE COURSE_ID= #{courseId} and MEMBER_ID= #{memberId} 
	
	</update>	
	
	<delete id="reviewDelete" parameterType="Map">
		DELETE FROM review
		WHERE   COURSE_ID= #{courseId} and MEMBER_ID= #{memberId} 
	
	 </delete>
	
	
</mapper>