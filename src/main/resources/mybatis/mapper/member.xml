<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.basakcoding.basak.mapper.MemberMapper">



	<!-- 테스트 -->
	<select id="selectListWithReview" resultType="map" >
		SELECT m.*, r.content, r.rating FROM members m JOIN review r ON m.member_id = r.member_id
	</select>

	<!-- 전체 사용자 얻기 -->
	<select id="selectList" resultType="MemberDTO" >
		SELECT * FROM members ORDER BY registered_at DESC
	</select>
	
	
	<!-- 아이디로 사용자 얻기 -->
	<select id="getMemberById" parameterType="String" resultType="MemberDTO">
		SELECT * FROM members WHERE member_id=#{memberId}
	</select>
	
	<!-- 이메일로 사용자 얻기 -->
	<select id="getMemberByEmail" parameterType="String" resultType="MemberDTO">
		SELECT * FROM members WHERE email=#{email}
	</select>
	
	<!-- 사용자 생성, selectKey로 memberId반환 -->
	<insert id="createMember" parameterType="Map">
		<selectKey keyProperty="memberId" resultType="int" order="BEFORE">
			SELECT seq_members.NEXTVAL FROM dual
		</selectKey>
		INSERT INTO members VALUES(#{memberId}, #{email}, #{password}, #{username}, DEFAULT, DEFAULT, DEFAULT, 
		<choose>
			<when test="avatar != null">#{avatar},</when>
			<otherwise>DEFAULT,</otherwise>
		</choose>
		null)
	</insert>
	
	<!--  -->
	
	<insert id="registerMember" parameterType="Map">
		<selectKey keyProperty="memberId" resultType="int" order="BEFORE">
			SELECT seq_members.NEXTVAL FROM dual
		</selectKey>
		INSERT INTO members VALUES(#{memberId}, #{email}, #{password}, #{username}, DEFAULT, DEFAULT, DEFAULT, 
		<choose>
			<when test="avatar != null">#{avatar},</when>
			<otherwise>DEFAULT,</otherwise>
		</choose>
		#{emailSecret})
	</insert>
	
	<!-- 사용자 수정 -->
	<update id="updateMember" parameterType="Map">
		UPDATE members SET username=#{username}
		<if test="avatar != null">, avatar=#{avatar}</if> 
		WHERE member_id=#{memberId}
	</update>
	
	<!-- 사용자 삭제 -->
	<delete id="deleteMultpleMember" parameterType="Map">
		DELETE members WHERE member_id in
		<foreach collection="target" item="item" separator="," open="(" close=")">
			#{item}
		</foreach>
	</delete>
	
	<!-- 파일 업로드 -->
	<update id="fileUpdate" parameterType="Map">
		UPDATE MEMBERS SET AVATAR=#{file_name} WHERE MEMBER_ID=#{userId}
	</update>
	
	<!-- 프로필페이지 내정보 가져오기 -->
	<select id="selectMyInfo" parameterType="int" resultType="map">
		SELECT * FROM members WHERE member_id=#{userId}
	</select>
	
	<!-- 결제한 강의 개수가져오기 -->
	<select id="paymentCount" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM payment p JOIN members m ON (p.member_id =m.member_id) WHERE m.member_id=#{userId}
		AND p.payment_state='결제 완료'
	</select>
	
	<!-- 나의 댓글 개수-->
	<select id="commentsCount" parameterType="int" resultType="int">
		select count(*) from comments c JOIN members m ON (c.member_id = m.member_id) WHERE m.member_id=#{userId}
	</select>
	
	<!-- 나의 질문 개수-->
	<select id="questionCount" parameterType="int" resultType="int">
		select count(*) from question q JOIN members m ON (q.member_id = m.member_id) WHERE m.member_id=#{userId}
	</select>
	
	<!-- 나의 닉네임 변경 -->
	<update id="userNameEdit" parameterType="Map">
		UPDATE members SET username=#{username} WHERE member_id=#{userId}
	</update>
	
	<!-- 비밀번호 변경 -->
	<update id="passwordEdit" parameterType="Map">
		UPDATE members SET password=#{password} WHERE member_id=#{userId}
	</update>
	
	<!-- 내 강의 가져오기 -->
	<select id="myCourses" parameterType="int" resultType="Map">
		select co.title,co.short_description,co.period,cu.name,a.name admin_name
		from members m JOIN payment p ON m.member_id=p.member_id
		JOIN courses co ON p.course_id=co.course_id 
		JOIN curriculum cu ON co.course_id=cu.course_id
		JOIN admins a ON co.admin_id=a.admin_id
		where p.payment_state='결제 완료' AND m.member_id=#{userId}
	</select>
	
	<!-- 내 결제정보 가져오기 -->
	<select id="myPayment" parameterType="int" resultType="Map">
		select p.*,co.period,co.title,p.created_at payment_created
		from members m 
		JOIN payment p ON m.member_id=p.member_id
		JOIN courses co ON p.course_id=co.course_id
		where p.payment_state='결제 완료' and m.member_id=#{userId}
	</select>
	
	<!-- 내 결제 상세보기 -->
	<select id="viewDetails" parameterType="String" resultType="Map">
		select p.payment_code,co.title,co.period,m.email,p.created_at,
		p.payment_method,p.price
		from members m JOIN payment p ON m.member_id=p.member_id
		JOIN courses co ON p.course_id=co.course_id
		WHERE m.member_id=#{userId} AND p.payment_code=#{pay_code}
	</select>
	
	<!-- 내 문의 제목,시간 -->
	<select id="myInquiry" parameterType="int" resultType="Map">
		select i.title,i.created_at
		from members m JOIN inquiry i ON m.member_id=i.member_id
		WHERE m.member_id=#{userId}
	</select>
	
	<!-- 내 문의 상세보기 -->
	<select id="inquDetails" parameterType="String" resultType="Map">
		select i.*,m.username,c.name 
		from members m JOIN inquiry i ON m.member_id=i.member_id
		JOIN classification c ON i.cl_id = c.cl_id
		WHERE m.member_id=#{userId} AND i.title=#{title}
	</select>
	
	<!-- 내 댓글 제목,시간 -->
	<select id="myComments" parameterType="int" resultType="Map">
		 select co.content,co.created_at
		 from members m JOIN comments co ON m.member_id=co.member_id
		 WHERE m.member_id=${userId}
	</select>
	<!-- 
	 댓글 상세보기
	<select id="commentsDetails" parameterType="String" resultType="Map">
		select m.username,co.title
	</select>
	 -->
	
	
	<!-- 이메일로 emailvalidate값 얻기 -->
	<update id="updateEmailValidate" parameterType="Map" >
		UPDATE members SET email_validate='Y' WHERE email_Secret=#{code}
	</update>
	
	
</mapper>